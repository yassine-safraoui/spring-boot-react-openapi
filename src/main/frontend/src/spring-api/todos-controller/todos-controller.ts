/**
 * Generated by orval v7.0.1 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  TodoCreateRequest,
  TodoResponse,
  TodoUpdateRequest,
} from ".././schemas";

export type updateTodoResponse = {
  data: void;
  status: number;
};

export const getUpdateTodoUrl = (id: number) => {
  return `http://localhost:8080/api/todos/${id}`;
};

export const updateTodo = async (
  id: number,
  todoUpdateRequest: TodoUpdateRequest,
  options?: RequestInit,
): Promise<updateTodoResponse> => {
  const res = await fetch(getUpdateTodoUrl(id), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(todoUpdateRequest),
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getUpdateTodoMutationOptions = <
  TError = Promise<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTodo>>,
    TError,
    { id: number; data: TodoUpdateRequest },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateTodo>>,
  TError,
  { id: number; data: TodoUpdateRequest },
  TContext
> => {
  const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateTodo>>,
    { id: number; data: TodoUpdateRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateTodo(id, data, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateTodoMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateTodo>>
>;
export type UpdateTodoMutationBody = TodoUpdateRequest;
export type UpdateTodoMutationError = Promise<unknown>;

export const useUpdateTodo = <
  TError = Promise<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTodo>>,
    TError,
    { id: number; data: TodoUpdateRequest },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateTodo>>,
  TError,
  { id: number; data: TodoUpdateRequest },
  TContext
> => {
  const mutationOptions = getUpdateTodoMutationOptions(options);

  return useMutation(mutationOptions);
};
export type deleteTodoByIdResponse = {
  data: void;
  status: number;
};

export const getDeleteTodoByIdUrl = (id: number) => {
  return `http://localhost:8080/api/todos/${id}`;
};

export const deleteTodoById = async (
  id: number,
  options?: RequestInit,
): Promise<deleteTodoByIdResponse> => {
  const res = await fetch(getDeleteTodoByIdUrl(id), {
    ...options,
    method: "DELETE",
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getDeleteTodoByIdMutationOptions = <
  TError = Promise<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTodoById>>,
    TError,
    { id: number },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteTodoById>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteTodoById>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteTodoById(id, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteTodoByIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteTodoById>>
>;

export type DeleteTodoByIdMutationError = Promise<unknown>;

export const useDeleteTodoById = <
  TError = Promise<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTodoById>>,
    TError,
    { id: number },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteTodoById>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteTodoByIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export type getAllTodosResponse = {
  data: TodoResponse[];
  status: number;
};

export const getGetAllTodosUrl = () => {
  return `http://localhost:8080/api/todos/`;
};

export const getAllTodos = async (
  options?: RequestInit,
): Promise<getAllTodosResponse> => {
  const res = await fetch(getGetAllTodosUrl(), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getGetAllTodosQueryKey = () => {
  return [`http://localhost:8080/api/todos/`] as const;
};

export const getGetAllTodosQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllTodos>>,
  TError = Promise<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getAllTodos>>, TError, TData>
  >;
  fetch?: RequestInit;
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllTodosQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllTodos>>> = ({
    signal,
  }) => getAllTodos({ signal, ...fetchOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllTodos>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllTodosQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllTodos>>
>;
export type GetAllTodosQueryError = Promise<unknown>;

export function useGetAllTodos<
  TData = Awaited<ReturnType<typeof getAllTodos>>,
  TError = Promise<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getAllTodos>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getAllTodos>>,
        TError,
        TData
      >,
      "initialData"
    >;
  fetch?: RequestInit;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAllTodos<
  TData = Awaited<ReturnType<typeof getAllTodos>>,
  TError = Promise<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getAllTodos>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getAllTodos>>,
        TError,
        TData
      >,
      "initialData"
    >;
  fetch?: RequestInit;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAllTodos<
  TData = Awaited<ReturnType<typeof getAllTodos>>,
  TError = Promise<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getAllTodos>>, TError, TData>
  >;
  fetch?: RequestInit;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetAllTodos<
  TData = Awaited<ReturnType<typeof getAllTodos>>,
  TError = Promise<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getAllTodos>>, TError, TData>
  >;
  fetch?: RequestInit;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllTodosQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type addTodoResponse = {
  data: void;
  status: number;
};

export const getAddTodoUrl = () => {
  return `http://localhost:8080/api/todos/`;
};

export const addTodo = async (
  todoCreateRequest: TodoCreateRequest,
  options?: RequestInit,
): Promise<addTodoResponse> => {
  const res = await fetch(getAddTodoUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(todoCreateRequest),
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getAddTodoMutationOptions = <
  TError = Promise<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addTodo>>,
    TError,
    { data: TodoCreateRequest },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addTodo>>,
  TError,
  { data: TodoCreateRequest },
  TContext
> => {
  const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addTodo>>,
    { data: TodoCreateRequest }
  > = (props) => {
    const { data } = props ?? {};

    return addTodo(data, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddTodoMutationResult = NonNullable<
  Awaited<ReturnType<typeof addTodo>>
>;
export type AddTodoMutationBody = TodoCreateRequest;
export type AddTodoMutationError = Promise<unknown>;

export const useAddTodo = <
  TError = Promise<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addTodo>>,
    TError,
    { data: TodoCreateRequest },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationResult<
  Awaited<ReturnType<typeof addTodo>>,
  TError,
  { data: TodoCreateRequest },
  TContext
> => {
  const mutationOptions = getAddTodoMutationOptions(options);

  return useMutation(mutationOptions);
};
