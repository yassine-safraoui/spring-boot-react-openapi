/**
 * Generated by orval v7.0.1 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type { User } from ".././schemas";

export type getUserResponse = {
  data: User;
  status: number;
};

export const getGetUserUrl = (id: number) => {
  return `http://localhost:8080/api/users/${id}`;
};

export const getUser = async (
  id: number,
  options?: RequestInit,
): Promise<getUserResponse> => {
  const res = await fetch(getGetUserUrl(id), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getGetUserQueryKey = (id: number) => {
  return [`http://localhost:8080/api/users/${id}`] as const;
};

export const getGetUserQueryOptions = <
  TData = Awaited<ReturnType<typeof getUser>>,
  TError = Promise<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUser>>> = ({
    signal,
  }) => getUser(id, { signal, ...fetchOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type GetUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUser>>
>;
export type GetUserQueryError = Promise<unknown>;

export function useGetUser<
  TData = Awaited<ReturnType<typeof getUser>>,
  TError = Promise<unknown>,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUser>>,
          TError,
          TData
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetUser<
  TData = Awaited<ReturnType<typeof getUser>>,
  TError = Promise<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUser>>,
          TError,
          TData
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetUser<
  TData = Awaited<ReturnType<typeof getUser>>,
  TError = Promise<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>
    >;
    fetch?: RequestInit;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetUser<
  TData = Awaited<ReturnType<typeof getUser>>,
  TError = Promise<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>
    >;
    fetch?: RequestInit;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetUserQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type getAllUsersResponse = {
  data: User[];
  status: number;
};

export const getGetAllUsersUrl = () => {
  return `http://localhost:8080/api/users/`;
};

export const getAllUsers = async (
  options?: RequestInit,
): Promise<getAllUsersResponse> => {
  const res = await fetch(getGetAllUsersUrl(), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getGetAllUsersQueryKey = () => {
  return [`http://localhost:8080/api/users/`] as const;
};

export const getGetAllUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllUsers>>,
  TError = Promise<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>
  >;
  fetch?: RequestInit;
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllUsersQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllUsers>>> = ({
    signal,
  }) => getAllUsers({ signal, ...fetchOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllUsers>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllUsers>>
>;
export type GetAllUsersQueryError = Promise<unknown>;

export function useGetAllUsers<
  TData = Awaited<ReturnType<typeof getAllUsers>>,
  TError = Promise<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getAllUsers>>,
        TError,
        TData
      >,
      "initialData"
    >;
  fetch?: RequestInit;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAllUsers<
  TData = Awaited<ReturnType<typeof getAllUsers>>,
  TError = Promise<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getAllUsers>>,
        TError,
        TData
      >,
      "initialData"
    >;
  fetch?: RequestInit;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAllUsers<
  TData = Awaited<ReturnType<typeof getAllUsers>>,
  TError = Promise<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>
  >;
  fetch?: RequestInit;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetAllUsers<
  TData = Awaited<ReturnType<typeof getAllUsers>>,
  TError = Promise<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>
  >;
  fetch?: RequestInit;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllUsersQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
